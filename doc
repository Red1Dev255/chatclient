server :

const express = require('express');
const axios = require('axios');
const app = express();
const port = 3000;

// Middleware pour parser le JSON dans les requêtes POST
app.use(express.json());

// Route POST pour vérifier la disponibilité du serveur distant
app.post('/check-server', async (req, res) => {
    const { url } = req.body;  // On suppose que l'URL du serveur distant est envoyée dans le corps de la requête POST

    if (!url) {
        return res.status(400).json({ error: 'L\'URL du serveur est nécessaire.' });
    }

    try {
        // On effectue une requête GET pour vérifier si le serveur distant répond
        const response = await axios.get(url);
        
        // Si la requête réussit et renvoie un code 2xx, le serveur est en ligne
        if (response.status >= 200 && response.status < 300) {
            return res.status(200).json({ message: 'Le serveur est en ligne.', statusCode: response.status });
        } else {
            return res.status(500).json({ message: 'Le serveur est en ligne mais a renvoyé une erreur.', statusCode: response.status });
        }
    } catch (error) {
        // Si la requête échoue (serveur hors ligne, problème de réseau, etc.), renvoie une erreur
        return res.status(500).json({ message: 'Le serveur est hors ligne ou inaccessible.', error: error.message });
    }
});

// Démarre le serveur Express
app.listen(port, () => {
    console.log(`Serveur démarré sur http://localhost:${port}`);
});


client :

fetch('http://localhost:3000/check-server', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify({ url: 'http://example.com' }) // URL du serveur à tester
})
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('Erreur:', error));



//////////////Autre doc : https://brightdata.com/blog/web-data/fetch-api-in-javascript
